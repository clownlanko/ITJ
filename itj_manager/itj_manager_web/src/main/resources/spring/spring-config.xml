<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://mybatis.org/schema/mybatis-spring
       http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <context:component-scan base-package="top.genitalbean.itj.service"/>
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.pwd}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="initialSize" value="${jdbc.initsize}"/>
        <property name="maxActive" value="${jdbc.maxsize}"/>
    </bean>
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="basicDataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <property name="typeAliasesPackage" value="top.genitalbean.itj.dao.mapper"/>
    </bean>
    <mybatis:scan base-package="top.genitalbean.itj.dao.mapper"/>
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="top.genitalbean.itj.dao.mapper"/>-->
    <!--</bean>-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="basicDataSource"/>
    </bean>
    <!--<tx:annotation-driven/>-->
    <!--<tx:advice id="txAdvice">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="find*" read-only="true" />-->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="query*" read-only="true"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="*" propagation="REQUIRED" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 配置aop， spring是通过aop来进行事务管理的 &ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash; 设置pointCut表示那些方法要加入事务处理 &ndash;&gt;-->
        <!--&lt;!&ndash; 以下的事务是声明在dao中的，但是通常都会在service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常-->
               <!--就会导致数据不完整，所以事务不应该在dao层处理，而应在service，这也是spring所提供的一个非常方便的工具，声明式事务&ndash;&gt;-->
        <!--<aop:pointcut id="interceptorPointCuts"-->
                      <!--expression="execution(* top.genitalbean.itj.service.impl.*.*(..))"/>-->
        <!--&lt;!&ndash; 通过advisor来确定具体要加入事务控制的方法 &ndash;&gt;-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts"/>-->
    <!--</aop:config>-->
</beans>